/*请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
vector<vector<int>> Print(TreeNode* pRoot) {
	vector<vector<int>> res;        
	if(pRoot == NULL)
		return res;
	vector<TreeNode*> odd;
	vector<TreeNode*> even;
	even.push_back(pRoot);
	vector<int> val;
	int flag=0,o=0,e=0;
	for(;!(odd.empty() && even.empty());++flag)
	{
		if(flag%2)
		{
			even.clear();
			for(o = odd.size()-1;o>=0;--o)
			{
				if(odd[o]->right!=NULL)
					even.push_back(odd[o]->right);
				if(odd[o]->left!=NULL)
					even.push_back(odd[o]->left);
				val.push_back(odd[o]->val);
			}
		}
		else
		{
			odd.clear();
			for(e = even.size()-1;e>=0;--e)
			{
				if(even[e]->left!=NULL)
					odd.push_back(even[e]->left);
				if(even[e]->right!=NULL)
					odd.push_back(even[e]->right);
				val.push_back(even[e]->val);
			}
		}
		if(!val.empty())
			res.push_back(val);
		val.clear();
		if(odd.empty() && even.empty())
			break;
	}

	return res;
}
};