/*请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。*/
class Solution {
public:
bool findcore(vector<int> v, char* matrix, int rows,int cols, int i, int j, char* str, int cnt)
{
	if (str[cnt] == '\0')
		return true;
	if (i<0 || j<0||i>= rows ||j>= cols)
		return false;
	if (v[(cols)*i + j] == 1)
 		return false;
	if (matrix[(cols)*i + j] == str[cnt])
	{
		v[(cols)*i + j] = 1;
		return findcore(v, matrix, rows, cols, i + 1, j, str, cnt + 1) ||
			findcore(v, matrix, rows, cols, i - 1, j, str, cnt + 1) ||
			findcore(v, matrix, rows, cols, i, j + 1, str, cnt + 1) ||
			findcore(v, matrix, rows,cols, i, j - 1, str, cnt + 1);
	}
	else
		return false;
}

bool hasPath(char* matrix, int rows, int cols, char* str)
{
	vector<int> v(rows*cols, 0);
	int i = 0;
	int j = 0;
	for (i = 0; i<rows; i++)
		for (j = 0; j<cols; j++)
		{
			if (findcore(v, matrix, rows,cols, i, j, str, 0))
				return true;
		}
	return false;
}
};