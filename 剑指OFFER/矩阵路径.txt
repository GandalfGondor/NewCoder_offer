/*请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。*/
class Solution {
public:
bool core(char* matrix, int rows,int cols,int row,int col, char* str,vector<bool> vec)
{
	if(*str == 0)
		return true;
	if(row >= rows || row<0 ||col<0 || col >= cols 
		|| vec[row*cols+col] == false||*(matrix+row*cols+col) != *str)
		return false;

	vec[row*cols+col] = false;
	return core(matrix, rows, cols, row+1, col, str+1, vec)||
		core(matrix, rows, cols, row-1, col, str+1, vec)||
		core(matrix, rows, cols, row, col-1, str+1, vec)||
		core(matrix, rows, cols, row, col+1, str+1, vec);
	
}

bool hasPath(char* matrix, int rows, int cols, char* str)
{
	if(matrix == nullptr)
		return false;
	if(str == nullptr)
		return true;
	int sum = rows*cols;
	int i ,j;
	bool flag = false;	
	vector<bool> vec(sum,true);
	for(i=0; i<rows && flag != true; ++i)
	{
		for(j=0; j<cols && flag!= true; ++j)
			flag = core(matrix, rows,cols,i,j ,str,vec);
	}
	return flag;

}
};
};