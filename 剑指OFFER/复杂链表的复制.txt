/*输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一
个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程
序会直接返回空）*/
/*
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
class Solution {
public:
    void clone(RandomListNode* pHead)
{
	while (pHead != nullptr)
	{
		RandomListNode* cHead = new RandomListNode(pHead->label);
		cHead->next = pHead->next;
		pHead->next = cHead;
		pHead = cHead->next;
	}
}
void copy(RandomListNode* pHead)
{
	while (pHead != nullptr)
	{
		if (pHead->random != nullptr)
		{
			pHead->next->random = pHead->random->next;
		}
			pHead = pHead->next->next;
	}
}
RandomListNode* des(RandomListNode* pHead)
{
	RandomListNode* record = pHead->next;
	RandomListNode* temp;
	while (pHead != nullptr)
	{
		temp = pHead->next->next;
		if (pHead->next->next != nullptr)
		{
			pHead->next->next = pHead->next->next->next;
		}
		else
		{
			pHead->next->next = nullptr;
			pHead->next = nullptr;
			break;
		}
		pHead->next = temp;
		pHead = pHead->next;
	}
	return record;
}
RandomListNode* Clone(RandomListNode* pHead)
{
	if (pHead == nullptr)
		return nullptr;
	clone(pHead);
	copy(pHead);
	return des(pHead);
}
};