/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:

void frontp(TreeNode* root,std::string& res)
{
	if(root == NULL)
	{
		res += '$';
		res += ','; 
		return ;
	}
	res += std::to_string(root->val);
	res += ',';
	
	frontp(root->left,res);
	frontp(root->right,res);
	return;
}

char* Serialize(TreeNode *root) {    
	std::string res;
	int now;
	if(root == NULL)
		return NULL;
	frontp(root,res);
	char *r = new char[res.size()];
	int i;
        for(i = 0; i < res.length(); i++){
            r[i] = res[i];
        }
	r[i-1]= 0;
	return r;
}

TreeNode* des(char *str,int &i)
{
	if(str[i]==',')
		++i;
	if(str[i] == '$' )
	{
		++i;
		if(str[i]==',')
			++i;
		return NULL;
	}
	if(str[i] == '\0')
		return NULL;
	int v = 0;
	while(str[i]<='9' && str[i]>='0')
	{
		v = v*10 + str[i]-'0';	
		++i;
	}
	TreeNode *p = new TreeNode(v);
	p->left = des(str,i);
	p->right = des(str,i);
	return p;
}

TreeNode* Deserialize(char *str) {
	if(str == NULL || str[0] == '\0')	
		return NULL;
	int i = 0;
	TreeNode* head = des(str,i);
	return head;
}
};