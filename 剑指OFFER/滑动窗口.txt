/*给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。*/
class Solution {
public:
    vector<int> maxInWindows(const vector<int>& num, unsigned int size)
    {
        int i =0;
        vector<int> v;
        if(size == 0)
            return v;
        for(;i+size<=num.size();i++)
        {
            v.push_back(maxcore(num,size,i));
        }
        return v;
    }
    int maxcore(const vector<int>& num,unsigned int size,int start)
    {
        int i=0;
        int max = num[start];
        for(;i<size;i++)
        {
            if(max<num[i+start])
                max = num[i+start];
        }
        return max;
    }
};