
/**
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructcore(vector<int> pre,int ps,int pe,vector<int> vin,
                     int vs,int ve)
{
	TreeNode* root = new TreeNode(pre[ps]);
	if(ps == pe) return root;
	int i(vs);
	while(pre[ps] != vin[i] && i<=ve)
	{
	    i++;
	}
	if(i>vs)
	    root->left = constructcore(pre,ps+1,ps+i-vs,vin,vs,i-1);
	if(ve>i)
	    root->right = constructcore(pre,ps+(i-vs)+1,pe,vin,i+1,ve);
	return root;
}

TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
	if(pre.size() == 0|| vin.size() == 0|| pre.size() != vin.size())
	       return nullptr;
	int ps = 0,pe = pre.size()-1,vs = 0,ve = vin.size()-1;
	return constructcore(pre,ps,pe,vin,vs,ve);
}
};