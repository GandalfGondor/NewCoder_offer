/*
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
   {
	RandomListNode *pt, *nt;
	RandomListNode *pt2, *nt2;
	int cnt = 1, cnt2 = 0, i = 0;
	if (pHead == nullptr)
		return nullptr;
	RandomListNode *nHead = new RandomListNode(pHead->label);
	nt = nHead;
	pt = pHead;
	while (pt->next != nullptr)
	{
		pt = pt->next;
		cnt++;
		nt->next= new RandomListNode(pt->label);
		nt = nt->next;

	}
	for (pt = pHead, nt = nHead; pt != nullptr; pt = pt->next, nt = nt->next)
	{
		for (cnt2 = 0, pt2 = pt->random; pt2 != nullptr; pt2 = pt2->next)
			cnt2++;
		if (cnt2 == 0)
			nt->random = nullptr;
		else
		{
			for (i = 0, nt2 = nHead; i<cnt - cnt2; i++)
				nt2 = nt2->next;
			nt->random = nt2;
		}
	}
	return nHead;
}
};