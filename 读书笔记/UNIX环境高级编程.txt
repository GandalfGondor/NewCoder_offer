POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ）

第三章 文件I/O
文件描述符是一个非负整数。
int open(const char* pathname, int oflag,...,mode_t)
open返回的文件描述符一定是最小的未用描述符数字。
oflag为O_RDONLY,O_WRONLY,O_RDWR,
mode_t一般为S_IRUSR,S_IWUSR,S_IXUSR

int creat(const char* pathname,mode_t mode)

int close(int filedes)
进程终止之后，所有打开的文件都有内核自动关闭。

off_t lseek(int filedes,off_t offset,int whence)
通常文件位移量是一个非负整数，但是有些设备可以为负，所以比较其返回值应该判断是否等于-1。

ssize_t read(int files,void * buff,size_t nbytes)
ssize_t是有符号的整形。
size_t是无符号整形。

ssize_t write(int filedes,const void *buff,size_t nbytes)
成功返回已写字数，出错返回-1

内核三种数据结构决定文件
1、进程表中记录文件描述符表。每一个位置有一个文件描述符标志和一个指针指向文件表。
2、打开文件有一个文件表，文件状态，文件位移量和指向v节点
3、每个打开文件有一个v节点，包含文件类型和各种操作函数信息。

打开文件设置O_APPEND标志可以使内核每次对这种文件写操作之前，将进程当前位移量设置到文件末尾处。

int dup(int filedes);
int dup2(int filedes,int filedes2);
dup返回的文件描述符一定是当前可用文件描述符中最小数值。
dup2用filedes2参数指定新描述符的数值。
其返回的新文件描述符与参数filedes共享，所以共享同一文件状态标志。以及同一文件位移量。

int fcntl(int fileds,int cmd,...)
该函数可以改变已经打开文件的性质
常用关于文件描述符F_GETFD,F_SETFD
常用关于文件状态标记F_GETFL,F_SETFL

ioctl函数是I/O操作的杂物箱。
int ioctl(int filedes,int request,...)

第七章 UNIX进程的环境
当内核启动C程序时，在调用main之前先调用一个特殊的启动例程。

void exit(int status)
void exit(int status)

_exit()立即进入内核，exit先执行一些清除处理工作(调用执行各终止处理程序，关闭所有标准IO流)，再进入内核。
参数为终止状态。

int atexit(void(*func)(void));
atexit参数是一个函数地址。

argv[argc]是一个空指针。

C程序存储空间：
1、正文段，程序段
2、初始化数据段，数据段
3、非初始化数据段。bss段
4、栈
5、堆


每个程序都接收到一张环境表，环境表是一个字符指针数组，每个指针包含一个null结束的字符串地址。
extern char** environ
char *getenv(const char *name)
返回指向与name有关的value指针，否则返回null。不要直接利用environ。

非局部跳转：setjmp和longjmp函数。
int setjmp(jmp_buf env);
	直接调用返回值为0，从longjmp跳转过来返回值为非零，即longjmp设置的val。
int longjmp(jmp_buf env, int val);
如果要编写一个使用非局部跳转的可移植程序，则必须使用volatile关键字。

第八章 进程控制
进程ID 0是调度进程，也被叫为交换进程。内核的一部分，被称为系统进程。
进程ID 1是init进程，在内核自举后启动一个UNIX系统。该进程不会终止。
进程ID 2是精灵进程。负责虚存系统的请页操作。

pid_t fork(void);
fork创建进程为子进程，函数调用一次，返回两次。两次返回值为0，父进程的返回值为子进程ID，
子进程获得父进程的数据空间，栈和堆。

fork会影响IO函数之间的关系。若用标准IO库函数，若标准输出连接至终端，则行缓存，否则全缓存。
所以很有可能造成父进程数据空间复制到子进程中时，缓存数据也被复制到子进程，于是父子进程都带有内容缓存。
父进程打开的文件描述符被复制到子进程。共享一个文件表项。
除此之外子进程还继承父进程的如下资源：
1、实际用户ID，实际组ID
2、添加组ID
3、进程组ID
4、控制终端
5、工作目录
6、信号屏蔽
7、执行时关闭标识位 FD_CLOEXEC
8、环境
主要区别
1、fork返回值
2、进程ID
3、父进程不同
4、父进程的锁，子进程不继承
5、未决警告，未决信号集置空。

fork主要有两种用法：
1、一个父进程希望复制自己，执行不同的代码段。
2、一个进程要执行一个不同程序。

vfork函数的调用和fork相同。
vfork用于创建一个新的进程，该新进程的目的主要是调用exec执行一个新的程序。
vfork与fork的区别是，不将父进程的地址空间完全复制到子进程，因为子进程会立即调用exec，于是也就
不会存访该地址空间。在exec或者exit之前，他在父进程中空间中运行。而且vfork保证子进程优先运行。

调用abort函数，它产生SIGABRT信号，
无论进程如何终止，最后都会执行相同代码，为相应进程关闭所有打开描述符，释放它所使用的存储器。
子进程终止时，父进程调用wait或waitpid得到相关信息，进程ID终止状态，CPU时间。之后内核释放终止进程的
存储器关闭打开的文件。

一个进程终止时，内核逐个检测所有活动进程，来判断它是否正要终止的进程的子进程，如果是，则将该进程的
父进程ID更改为1，即init进程的ID。
有init领养的进程发生终止时，init会自动调用一个wait函数来取得其终止状态。

当一个进程终止时，内核向父进程发送SIGCHILD信号。
pid_t wait(int *statloc)
pid_t waitpid(pid_t pid,int *statloc, int options)
pid>0 则等待ID与pid相等的进程
pid==0 等待组ID等于调用进程组ID的任意进程
pid<-1 等待其组ID等于pid的绝对值的任一子进程
statloc和exit返回的类型一样。


waitpid提供功能：
1、waitpid可以等待特定的进程
2、提供了一个wait的非阻塞版本
3、可以进行作业控制

int execl(const char *pathname,const char * arg0,...,(char*)0)
int execv(const char *pathname,char const *arvg[])
int execle(const char *pathname,const char * arg0,...,char *const envp[])
int execve(const char *pathname,char *const argv[],char* const envp)
int execlp(const char * filename,const char *arg0,..)
int execvp(const char *filename,char * const argv[])

执行exec后，进程不仅能保持类似于子进程的特性，还会保持，信号屏蔽字，文件锁，未决信号。
除非设置了FD_CLOEXEC标志位，系统默认exec后保持描述符打开。
这六个函数都会转换为execve的调用。

在exec前后实际用户ID和实际组ID保持不变，而有效ID是否改变则取决于所执行程序文件的设置-用户-ID位置，或组
的是否设置。

解释器文件，起始行的形式是：
#！ pathname[option]
解释器，上述path指定的文件。

解释器，内核识别解释器文件有额外开销。优点：
1、某些程序用某种语言脚本
2、效率高
3、使用其他shell编写shell脚本。

int system(const char *cmdstring)
system函数中利用了fork，exec和waitpid三个原语。

clock_t times(struct tms *buf);
返回值为墙上时间。
struct tms包含了用户CPU时间和系统CPU时间

第九章 进程关系
每一个允许登录的终端设备，init调用一次fork。

进程组是一个或者多个进程的集合。每一个进程组有一个唯一的进程组ID。
组长进程ID就是组ID。
int setpgid(pid_t pid, pid_t pgid)
该函数可以参加一个现存的进程组或者创建一个新的进程组。

对话期是一个或者多个进程组的集合。
pid_t setsid(void);
如果该进程不是进程组组长：
1、此进程变成对话期首进程。
2、成为一个新进程组的组长进程。
3、此进程没有控制终端。

1、一个对话期只有一个控制终端。
2、建立与控制终端连接的对话首进程称之为控制进程。
3、只有一个前台进程组，几个后台进程组。

作业控制：允许在一个终端上启动多个作业，控制哪一个作业可以存取该终端，以及哪些作业在后台运行。
只有前台作业接收终端输入。
孤儿进程组：该组中每个成员的父进程或者是该组的一个成员，或者不是该组所属对话期的成员。



















第十章 信号

信号是软中断。每个信号都有一个名字。这些名字都以三个字符 SIG开头。
头文件<signal.h>中，这些信号都被定义为正整数。

处理信号的三种方式：
1、忽略此信号。
2、捕捉信号。
3、执行系统默认动作。

SIGABRT调用abort函数时产生此信号。.
SIGALRM超过用alarm函数设置的时间时产生此信号。
SIGBUS指示一个实现定义的硬件故障。
SIGCHLD在一个进程终止或停止时，SIGCHLD信号被送给其父进程。
SIGSEGV 指示进程进行了一次无效的存储访问。
SIGKILL 这是两个不能被捕捉或忽略信号中的一个。
SIGSTOP 这是一个作业控制信号， 它停止一个进程。不能被捕捉或忽略。
SIGUSR1 这是一个用户定义的信号，可用于应用程序。
SIGUSR2 这是一个用户定义的信号，可用于应用程序。

最简单的界面是signal函数：
void(*signal(int signo,void (*func)(int)))(int)
signo是信号名，func为SIG_IGN,SIG_DFL,或者调用函数地址，也称为信号捕捉函数。
若有定义typedef void sigfunc(int);
则原函数可以表示为	sigfunc *signal(int signo,sigfunc*);

调用exec的进程忽略该信号，比较特殊的是，exec函数将原先设置为要捕捉的信号都改为默认动作。
这其实也很正常，因为exec执行一个新的程序，原先捕捉信号的地址早已经变了。

当一个进程调用fork时，其子进程继承父进程的信号处理方式。

如果在进程执行一个低速系统调用而阻塞期间捕捉到一个信号，则该系统调用就被中断不再继续执行。
该系统调用返回出错，其errno设置为EINTR。

malloc不是可再入的函数。标准IO库不可再入方式实现的。

作为一个通用的规则，当在信号处理程序时，应当在其前保存，在其后恢复errno。

在信号处理程序中调用一个不可再入函数，其结果是不可预见的。

SIGCLD
1、如果进程特地指定对该信号的配置为SIG_IGN，则调用进程的子进程将不产生僵尸进程。
2、如果将SIGCLD的配置设置为捕捉，则内核立即检查是否有子进程准备好被等待，如果是这样，
则调用SIGCLD处理程序。

进程调用sigpending函数将指定的信号设置为阻塞和未决。信号产生和递送之间的时间间隔，信号未决。

unsigned int alarm(unsigned int seconds)
经过指定的seconds秒后会产生指定的SIGALARM，每个进程只能有一个闹钟时间。

sigset_t包含一个信号集，有五个信号集处理函数：
int sigemptyset(sigset_t *set)	排除所有信号
int sigemfillset(sigset_t *set)	包括所有信号
int sigeaddset(sigset_t *set,int signo)	添加信号
int sigedelset(sigset_t *set, int signo)	删除信号
成功返回0，出错返回-1

信号屏蔽字规定了当前进程阻塞而不能递送给该进程的信号集。
int sigprocmask(int how, const sigset_t* set,sigset_t* oset)。成功返回0，失败返回-1
该函数检测或者更改进程的信号屏蔽字,oset即是返回的信号屏蔽字。

int sigpending(sigset_t * set);
返回对于调用进程被阻塞不能递送和当前未决的信号集。

int sigaction(int signo, const struct sigaction * act, struct sigaction * oact)
signo是检测或者修改的信号，act非空，则改变动作，oact非空，则返回原先动作。
检查或者修改与指定信号相关联的处理动作。
struct sigaction{
	void (*sa_handler)();   SIG_IGN，SIG_DFL，或者handler
	sigset_t sa_mask;	该信号集加入信号屏蔽字当中
	int sa_flags;
}

int sigsetjmp(sigjmp_buf env, int savemask)直接调用返回0，从siglongjmp调用，返回非0
void siglongjmp(sigjmp_buf env, int val)
在信号处理程序中作非局部转移时应当使用这两个函数。其中sigjmp_buf保存进程的当前信号屏蔽字。
longsigjmp时从env中恢复信号屏蔽字。
当调用一个信号处理程序时，被捕捉到的信号加到进程的当前信号屏蔽字。

int sigsuspend(const sigset_t * sigmask)
进程的信号屏蔽字设置为由sigmask指向的值。捕捉到一个信号或者发生了一个会终止该进程的信号之前，该进程
被挂起，若信号从处理程序返回，则sigsuspend返回，将信号屏蔽字设置为调用之前的值。
该函数总是返回-1.
如果在等待信号发生时希望去睡眠，则sigsuspend函数可以满足此种要求。

void abort(void)
该函数的功能是使程序异常终止，将SIGABRT信号发送给调用进程。此函数不返回。
让进程捕获SIGABRT的意图是允许它执行任何它想在进程终止前的清理。

system忽略SIGINT和SIGQUIT，阻塞SIGCHLD。
system的返回值是shell的终止状态，他不总是执行命令字符串进程的终止状态。

第十一章 终端IO
终端工作方式：
1、规范方式输入处理。以行为单位进行处理。
2、非规范方式输入处理。不以行为单位处理。

