POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ）


第十章 信号

信号是软中断。每个信号都有一个名字。这些名字都以三个字符 SIG开头。
头文件<signal.h>中，这些信号都被定义为正整数。

处理信号的三种方式：
1、忽略此信号。
2、捕捉信号。
3、执行系统默认动作。

SIGABRT调用abort函数时产生此信号。.
SIGALRM超过用alarm函数设置的时间时产生此信号。
SIGBUS指示一个实现定义的硬件故障。
SIGCHLD在一个进程终止或停止时，SIGCHLD信号被送给其父进程。
SIGSEGV 指示进程进行了一次无效的存储访问。
SIGKILL 这是两个不能被捕捉或忽略信号中的一个。
SIGSTOP 这是一个作业控制信号， 它停止一个进程。不能被捕捉或忽略。
SIGUSR1 这是一个用户定义的信号，可用于应用程序。
SIGUSR2 这是一个用户定义的信号，可用于应用程序。

最简单的界面是signal函数：
void(*signal(int signo,void (*func)(int)))(int)
signo是信号名，func为SIG_IGN,SIG_DFL,或者调用函数地址，也称为信号捕捉函数。
若有定义typedef void sigfunc(int);
则原函数可以表示为	sigfunc *signal(int signo,sigfunc*);

调用exec的进程忽略该信号，比较特殊的是，exec函数将原先设置为要捕捉的信号都改为默认动作。
这其实也很正常，因为exec执行一个新的程序，原先捕捉信号的地址早已经变了。

当一个进程调用fork时，其子进程继承父进程的信号处理方式。

如果在进程执行一个低速系统调用而阻塞期间捕捉到一个信号，则该系统调用就被中断不再继续执行。
该系统调用返回出错，其errno设置为EINTR。

malloc不是可再入的函数。标准IO库不可再入方式实现的。

作为一个通用的规则，当在信号处理程序时，应当在其前保存，在其后恢复errno。

在信号处理程序中调用一个不可再入函数，其结果是不可预见的。

SIGCLD
1、如果进程特地指定对该信号的配置为SIG_IGN，则调用进程的子进程将不产生僵尸进程。
2、如果将SIGCLD的配置设置为捕捉，则内核立即检查是否有子进程准备好被等待，如果是这样，
则调用SIGCLD处理程序。

进程调用sigpending函数将指定的信号设置为阻塞和未决。信号产生和递送之间的时间间隔，信号未决。

unsigned int alarm(unsigned int seconds)
经过指定的seconds秒后会产生指定的SIGALARM，每个进程只能有一个闹钟时间。

sigset_t包含一个信号集，有五个信号集处理函数：
int sigemptyset(sigset_t *set)	排除所有信号
int sigemfillset(sigset_t *set)	包括所有信号
int sigeaddset(sigset_t *set,int signo)	添加信号
int sigedelset(sigset_t *set, int signo)	删除信号
成功返回0，出错返回-1

信号屏蔽字规定了当前进程阻塞而不能递送给该进程的信号集。
int sigprocmask(int how, const sigset_t* set,sigset_t* oset)。成功返回0，失败返回-1
该函数检测或者更改进程的信号屏蔽字,oset即是返回的信号屏蔽字。

int sigpending(sigset_t * set);
返回对于调用进程被阻塞不能递送和当前未决的信号集。

int sigaction(int signo, const struct sigaction * act, struct sigaction * oact)
signo是检测或者修改的信号，act非空，则改变动作，oact非空，则返回原先动作。
检查或者修改与指定信号相关联的处理动作。
struct sigaction{
	void (*sa_handler)();   SIG_IGN，SIG_DFL，或者handler
	sigset_t sa_mask;	该信号集加入信号屏蔽字当中
	int sa_flags;
}

int sigsetjmp(sigjmp_buf env, int savemask)直接调用返回0，从siglongjmp调用，返回非0
void siglongjmp(sigjmp_buf env, int val)
在信号处理程序中作非局部转移时应当使用这两个函数。其中sigjmp_buf保存进程的当前信号屏蔽字。
longsigjmp时从env中恢复信号屏蔽字。
当调用一个信号处理程序时，被捕捉到的信号加到进程的当前信号屏蔽字。

int sigsuspend(const sigset_t * sigmask)
进程的信号屏蔽字设置为由sigmask指向的值。捕捉到一个信号或者发生了一个会终止该进程的信号之前，该进程
被挂起，若信号从处理程序返回，则sigsuspend返回，将信号屏蔽字设置为调用之前的值。
该函数总是返回-1.
如果在等待信号发生时希望去睡眠，则sigsuspend函数可以满足此种要求。

void abort(void)
该函数的功能是使程序异常终止，将SIGABRT信号发送给调用进程。此函数不返回。
让进程捕获SIGABRT的意图是允许它执行任何它想在进程终止前的清理。

system忽略SIGINT和SIGQUIT，阻塞SIGCHLD。
system的返回值是shell的终止状态，他不总是执行命令字符串进程的终止状态。
