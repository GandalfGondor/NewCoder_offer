导读：

被声明为explicit的构造函数通常比其non-explicit更受欢迎，因为他们禁止编译器执行非预期的类型转换。
构造调用operator= 是调用的copy构造函数。只有当新对象被定义时，调用构造函数，没有新对象则调用赋值函数。

值传递用户自定义类型通常是坏主意，pass-by-reference-to-const往往是比较好的选择。


第一章 让自己习惯C++
尽量用const，enum，inline替换#define，也可以认为用编译器替换预处理器。
enum不能取地址。
对于单纯常量，最好以const对象或者enums替换#defines。
对于形似函数的宏，最好用inline替换#define。
const写在类型之前 或者  类型之后星号之前，两种写法相同。

const成员函数：
1、他们使得class接口比较容易被理解。得知按个函数可以改动对象，哪个函数不能改动对象。
2、他们使操作const对象变得可能。

两个成员函数如果只是常量性不同，可以被重载。
mutable可以释放掉non-static成员变量的bitwise constness约束。

常量性转除。
const_cast<char&>(static_cast<const TextBlock&>(*this)[position])
将op[]返回值的const去除。给this的对象加上const限制。

const的作用：
1、在指针和迭代器上；
2、在指针、迭代器和reference指的对象上。
3、在函数的参数和返回类型上。
4、在local变量身上。
5、在成员函数身上。

当const和non-const成员函数有着等价地实现时，令non-const版本调用const版本可避免代码重复。

C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。所以构造函数的最佳写法：使用
成员初始化列表进行初始化。
class成员变量总是以其声明次序被初始化。

C++保证，函数内的local static对象会在 该函数调用期间或者首次遇上该对象之定义式时被初始化。
不同的编译单元内的non-local static对象的初始化相对于次序并无明确定义。

注意：
1、为内置对象进行手工初始化，因为C++并不保证初始化。
2、构造函数最好使用成员初值列，而不要在构造函数本体内使用赋值操作。
3、为免除“跨编译单元之初始化次序”，以local static对象替换non-local static对象。


第二章：构造，析构和赋值运算
如果打算在一个“内涵regerence成员”的class内支持赋值操作，你必须定义copy assignment操作符。面对
“内涵const成员”的class ，编译器反应也是一样。

将copy构造函数和copy assignment操作符声明为private，阻止调入。但是这种方法并不是绝对安全的，因为
member和friend还是可以调用他们的。所以只有声明就好。不去定义就会在连接期获得错误。

继承一个uncopayable可以将连接期错误转移到编译期。所以最好继承例如boost::noncopayable。可以保证
正常工作。

多态性质的base classes应该声明一个virtual析构函数，如果class带有任何虚函数，他就应该拥有一个虚析构。
classes如果不是基类或者需要多态性，就不应该声明析构函数。

如果析构函数可能会出现异常，最好将可能发生异常的功能，重新开辟一个函数，供用户调用。在析构时，判断是否
需要调用该函数。如果不需要调用该函数，则可以直接析构。总之就是希望用户可以第一时间调用并处理该函数。否则
如果异常发生，只能强迫结束程序或者吞下异常。

base class构造期间virtual函数绝对不会下降到derived classes阶层。即在base class构造期间，virtual不会
产生多态机制。
所以要记住在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class。

operator= 即赋值操作符返回一个reference to *this。
确保当对象自我复制时operator= 有良好的行为。其中技术包括 来源对象和目标对象的地址。调整语序，以及copy-
and-swap。

设计良好的面向对象系统会将对象内部封装起来，只留两个函数负责对象拷贝。那便是带着适切名称的copy和
copy assignment函数操作符。

编写copying函数，必须确保
1、复制所有local成员变量。
2、调用所有base classes内的适当copying函数。

不要尝试以某一个copying函数实现另一个copying函数。应该将共同机能放进第三个函数中，并由两个copying函数
实现。


第三章 资源管理
以对象管理资源两个关键想法：
1、获得资源后立刻放进管理对象内。   RAII：资源获取即初始化。
2、管理对象运用析构函数确保资源被释放。	

1、为防止资源泄漏，请使用RAII对象，他们在构造函数中获得资源并且在析构函数中释放。
2、两个常被使用的RAII class是shared_ptr和auto_ptr，尽量选shared_ptr。

如果需要赋值RAII对象，需要考虑：
1、禁止复制。
2、对底层资源祭出“引用计数法”

APIs往往要求访问原始资源，所以每一个RAII class应该提供一个取得其所管理之资源的办法。
对原始资源的访问又显示转换比较安全。隐式转换比较方便。

如果在new表达式中使用[]，必须在相应的delete表达式中使用[]。如果你在new表达式中不使用[]，一定不要在
相应的delete表达式中使用[]。

跨越语句的各项操作没有重新排列的自由。

第四章 设计与声明

预防错误：
1、利用类型系统。
2、限制类型可以做和不可以做的事。

解决对象切割问题，即调用函数参数为拥有虚函数的类对象，用by-reference-to-const方式比较好。

基本上只有内置类型和STL迭代器和函数对象，pass-by-value成本较小。其他任何东西，请尽量用
by-reference-to-const。

任何一个函数如果返回一个reference指向某个local对象，都将一败涂地。

返回一个reference和返回一个object之间选择，需要仔细挑出正确的选项。
1、一定不要返回一个指向local stack的pointer或者reference
2、不要返回一个指向heap-allocated对象
3、不要返回一个指向local static的pointer或者reference。

从封装角度来看，只有两种访问权限：private(提供封装)和不提供封装。

将所有便利函数放在多个头文件内但隶属于同一个命名空间，意味客户可以轻松扩展这一组便利函数。
但是class定义式对于客户而言是不能扩展的。
可以的话，宁以non-member non-friend函数替换member函数。这样可以增加封装性和包裹弹性和机能扩充。

如果你需要为某个函数的所有参数(包括被this指针所指的那个隐喻参数)进行类型转换，那么这个函数必须
是一个non-member。

针对调用swap函数。
1、当std::swap对你的类型效率不高时，提供一个swap成员函数，并确定这个函数不抛出异常。
2、如果你提供一个member swap，也该提供一个non-member swap用来调用前者。对于classes，也应该特化
	std::swap。
3、调用swap时应该针对std::swap使用using声明式，然后调用swap并且不带任何“命名空间资格修饰”。
4、为“用户定义类型”进行std templates全特化是好的，但千万不要尝试在std内加入对std而言是全新的东西。


第五章 实现
尽可能延后变量定义式的出现。这样做可增加程序的清晰度并且改善程序效率

C风格的转型动作看起来像这样：
(T)expression
T(expression)

C++提供四种新式转型：
const_cast<T>(expression)
通常被用来将对象的常量性转除。唯一拥有此能力的C++风格转型。
dynamic_cast<T>(expression)
主要用来安全向下转型，也就是用来决定某对象是否归属继承体系中的某个类型。
reinterpret_cast<T>(expression)
意图执行低级转型，实际动作可能取决于编译器，所以不可移植。
static_cast<T>(expression)
用来强迫隐式转换，例如将non-const对象转换为const对象，或将int转换为double等等。也可以还行反向转换，
将void* 指针转换为typed指针。将基类指针转换为派生类指针。无法将const转换为non-const。

应该避免转型，特别是在注重效率的代码中避免dynamic_cast，如果有个设计需要转型动作，试着发展无需转型
的设计。
如果转型是必须的，试着将它隐藏于某个函数背后。客户可以调用该函数，而不需将转型放进自己的代码。
宁可使用C++-style式转型，不要使用旧式转型。

成员函数如果返回一个handle代表对象内部成分，总是十分危险的。

异常安全性函数要素：
1、不泄露任何资源。
2、不允许数据早到破坏。

异常安全函数保证：
1、如果异常被抛出，程序内的任何事物仍然保持在有效状态下。
2、如果异常被抛出，程序状态不会改变。
3、承诺不抛出异常，因为他们总是能够完成他们的原先承诺的功能。

inline会造成程序体积太大。
inline只是对编译器的一个申请，不是强制指令。
inline函数无法随着程序库升级而升级。换句话说如果f是程序库内的一个inline函数，客户将“f函数本体”编进其
程序中，一旦程序库设计者决定改变f，则所有用到f的程序都必须重新编译。

1、如果使用object references和object pointers可以完成任务，就不要使用objects。
2、如果能够，尽量以class声明式替换class定义式。
3、为声明式和定义式提供不同的头文件。

Handle class和Interface classes解除了接口和实现之间的耦合关系，从而降低文件间的编译依存性。
1、上述理由便是支持编译依存性最小化。
2、程序库头文件应该以完全且仅有声明式的形式存在。


第六章 继承与面向对象设计
public继承，意味is-a。适用于base classes身上的每一件事情一定也适用于derived classes身上，因为每一个
derived class对象也都是一个base class对象。

derived classes内的名称会遮掩base classes内的名称。在public继承下从来没有人希望如此。
为了让被遮掩的名称再见天日，可使用using 声明式或者转交函数。

1、成员函数的接口总是会被继承
2、声明一个pure virtual函数的目的是为了让derived classes只继承函数接口。
3、声明一个non-virtual函数的目的是为了令derived classes继承函数的接口及一份强制性实现。

一般不定义纯虚函数，即派生类必须拥有自己的虚函数，不能直接继承基类的纯虚函数，否则自己仍然是一个抽象
类，但是当你实现了这个纯虚函数，可以用基类::虚函数名的方法来调用。

strategy模式。
封装类有一个成员变量，指向另一个策略基类。封装类成原函数调用策略基对象指针，该基类是多态，针对不同派
生类有不同策略。
std::function和std::bind()，的作用十分重要，可以更好地实现策略设计模式。


当你为解决问题而寻找某个设计方法时，不妨考虑virtual函数的替代方案。
1、使用non-virtual interface(NVI)手法，那是Template Method设计模式的一种。
2、将virtual函数替换为，函数指针成员变量。这是strategy设计模式一种。
3、以std::function成员变量替换virtual函数，因而允许使用任何可调用物搭配一个兼容于需求的签名模式。
	主要bind函数可以隐藏绑定相关对象(this)的细节。

non-virtual函数都是静态绑定的。
virtual是动态绑定的。
绝对不要重新定义继承而来的non-trival函数。
1、从实务方面讨论，派生类会根据指针类型的不同而展现不同的状态。
2、从理论层面讨论，派生类若要重新定义函数，便是设计的矛盾，要不然就不要继承，要不然就virtual函数。

静态绑定：early binding
动态绑定：late binding

静态类型为声明时候的类型。
动态类型则是指目前所指对象的类型。

动态绑定函数会从base处继承缺省参数值。
所以绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数是静态绑定的。

复合的意义和public继承完全不同。
在应用域，复合意味着has-a。在实现域，复合意味着is-implemented-in-terms-of。

C++规定独立对象必须有非零大小。
但是派生类继承空类，派生类不会被影响。即EBO(空白基类最优化)。

private继承意味着“根据某物实现出”，他通常比复合的级别低。
和复合不同，private可以造成empty base最优化。可以优化对象尺寸。








