第一章 简介
bzero不是一个ANSI C函数，它起源于berkeley网络编程代码，不过我们在整本书中使用它而不用memset函数，因为
bzero带两个参数比memset带三个参数更好记忆。

网络各层对等实体之间的交换单位信息称为协议数据单元，PDU，分节(segment)就是对应于TCP传输层的PDU。
每层PDU通过由紧邻下层提供给本层的服务接口，作为下层的服务数据单元SDU传递给下层。
应用层实体间交换的PDU称为应用数据，其中TCP应用进程之间交换的是没有长度限制的单个双向字节流。
外出接口最大传输单元MTU。

exit终止程序运行，Unix在一个进程终止时总是关闭该进程所有打开的描述符，我们的TCP套接字就此关闭。

errno的值只在函数发生错误的时候设置。全局变量中存放errno值对于共享所有全局变量的多个线程并不合适。

第二章 传输层：TCP、UDP和SCTP
绕过传输层直接使用IP层协议，这种技术称为原始套接字，极少使用。


TCP含有用于动态估算客户和服务器之间的往返时间(RTT)的算法。以便知道它等待一个确认需要多少时间。

在应用进程调用close或者unix进程exit或者从main return，都会在所有TCP连接上发送一个FIN。

重点TIME_WAIT状态：
执行主动关闭的那端经历的这个状态。该端点停留在这个状态的持续时间是最长声明期（maximum segment 
lifetime，MSL）的两倍。TTL最大值为255，尽管他不是时间，但是一般认为最大跳限的分组在网络中存在
的时间不可能超过2MSL。
TCP必须正确处理迷途重复分组或者漫游重复分组。
TIME_WAIT存在的理由：
1、可靠地实现TCP全双工连接的终止。
2、允许老的重复分节在网络中消失。

多个进程可能同时使用TCP，UDP和SCTP这3种传输层协议中的任何一种。这三种协议都使用16整数的端口号来区分
这些进程。

端口划分：
1、众所周知端口0~1023：不论是TCP还是UDP端口号80都被赋予Web服务器。
2、已登记端口：1024~49151	
3、动态端口、临时端口：49152~65535	动态的，私有的。

一个TCP链接的套接字对是一个定义该连接的两个端点的四元组：本地IP地址，本地TCP端口号，外地IP地址，外地TCP
端口号。唯一标识一个网络上的每个TCP链接。

并发服务器中主服务器通过派生一个子进程来处理每个新的链接。
TCP无法仅仅通过查看目的端口号来区分外来的分节到不同的端点。

IPv4主机对其产生的数据报执行分片，IPv4路由器则对其转发的数据报执行分片。
IPv6主机对其产生的数据报执行分片，IPv6路由器不对其转发的数据报执行分片。

IPv4数据报最大大小是65536字节，包括IPv4首部。
IPv6数据报的最大大小是65575字节，包括40字节的IPv6首部。
以太网MTU是常见的路径MTU，为1500字节。

MSS用于向对端TCP通告每个分节中能发送的最大TCP数据量。MSS=MTU-IP首部-TCP首部。
以太网中IPv4的MSS一般为1460。互联网中TCP默认536，是IPv4最小重组缓冲区字节数576-20-20。
MSS目的就是试图避免分片。

最小重组缓冲区大小：IPv4为576字节。
TCP必须为已发送的数据保留一个副本，直到它被对端确认为止。




第三章：套接字编程简介
IPv4地址和TCP或者UDP端口号在套接字地址结构中总是以网络字节序来存储。

通用套接字地址结构：
struct sockaddr{
uint8_t			sa_len;
sa_family_t 	sa_family;
char			sa_data[14];
}
所以函数套接字被定义为指向通用套接字地址结构的一个指针。

IPv4套接字地址结构：
struct in_addr{
in_addr_t		s_addr;
};
struct sockaddr_in{
uint8_t			sin_len;
sa_family_t		sin_family;
in_port_t		sin_port;
struct in_addr	sin_addr;
char 			sin_zero[8];
};

IPv6套接字地址结构
struct in6_addr{
unit8_t			sa_addr[16];
}
struct sockaddr_in6{
uint8_t			sin6_len;
sa_family_t		sin6_family;
in_port_t 		sin6_port;
uint32_t		sin6_flowinfo;
struct in6_addr	sin6_addr;
uint32_t		sin6_scope_id;

}

地址结构大小数据类型实际上是socklen_t而不是int。
从进程到内核传递套接字地址结构的函数有3个：bind、connect和sendto。
从内核到进程传递套接字地址结构的函数有4个：accept、recvfrom、getsockname和getpeername
这四个函数其中两个参数是指向某个套接字地址结构的指针和指向表示该结构大小的整数变量的指针。
当函数调用时，告诉内核结构大小，防止写时越界；当函数返回时，结构大小又是一个结果，告诉进程内核在
结构中究竟存储多少信息。这种参数称之为值-结果参数。

一种是将低序字节存储在起始地址，这称为小端字节序；另一种方法是将高序字节序存储在起始地址，称为大端序。
网际协议使用大端序来传送多字节整数。

uint16_t	htons(uint16_t	host16bitvalue)
uint32_t	htonl(uint32_t	host32bitvalue)
uint16_t	ntohs(uint16_t	net16bitvalue);
uint32_t	ntohl(uint32_t	net32bitvalue);

inet_pton和inet_ntop函数对于IPv4和IPv6地址都适用。
函数名中p表示表达式，n表示数值。
int inet_pton(int family, const char * strptr, void* addrptr);
若成功则为1，若输入不是有效的表达格式则为0，若出错则为-1；
const char* inet_ntop(int family, const void* addrptr, char* strptr, size_t len);
若成功则为指向结果的指针，若出错则为NULL。

查询错误，若errno == EINTR，如果发生该错误则继续进行读或者写操作。




第四章 基本TCP套接字编程

执行网络I/O，一个进程必须做的事情就是调用socket函数
#include<sys/socket.h>
int socket(int family, int type, int protocol);
如果成功则返回非负描述符，若是出错则为-1。

int family参数用以指明协议族；
	AF_INET		IPV4协议
	AF_INET6	IPV6协议
int type参数指明套接字类型；
	SOCK_STREAM		字节流套接字
	SOCKET_DGRAM	数据报套接字
	SOCKET_RAW 原始套接字
int protocol 参数应该设置位某个协议类型常值，或者设为0；
	IPPROTO_TCP		TCP传输协议
	IPPROTO_UDP		UDP传输协议
	
AF_XXX和PF_XXX区别
AF前缀表示地址族，PF表示协议族

int connect(int sockfd,const struct sockaddr *servaddr, socklen_t addrlen);
若成功则为0，若出错则为-1
sockfd		是由socket返回的套接字描述符
servaddr	是一个指向套接字地址结构的指针和该结构的大小
addrlen		地址结构的大小

connect出错情况：
1、若没有收到SYN分节，则返回ETIMEDOUT错误。
2、若收到RST，则表明该服务器主机对应的端口没有进程等待与之链接，这是一种硬错误，立马返回
ECONNREFUSED错误。
3、若客户发出的SYN在中间的某个路由器上引发一个“destination unreachable”ICMP错误，则发生软错误，客户
内核保存该消息，并按照第一种情况所述的时间间隔继续发送SYN。超过某个阈值时间，则返回ENETUNREACH或者
EHOSTUNREACH错误返回给进程。

注意：connect函数导致当前套接字从CLOSED状态转移到SYN_SENT状态，若成功则再转移到ESTABLISHED状态。若
connect失败则该套接字不可用，必须关闭，我们不能对这样套接字再次调用connect函数。

IPv4地址长度是32位，IPv6地址长度是128位。端口号都是16位。

#include<sys/socket.h>
int bind(int sockfd, const struct sockaddr *myadd, socklen_t addrlen);
第二个参数是一个指向特定于协议地址结构指针，第三个参数是该地址结构的长度。
bind函数返回一个常见错误是EADDRINUSE。
通配地址，内核选择IP地址。
端口0，内核选择端口。


#include<sys/socket.h>
int listen(int sockfd, int backlog);若成功则返回0，若出错则返回-1
1、第一个参数当socket函数创建一个套接字时，他被假设为一个主动套接字，listen函数把一个未连接的套接字
转换成一个被动套接字，指示内核应该接受指向该套接字的连接请求。
2、第二个参数规定了内核应该为相应套接字排队的最大链接数。

为了理解backlog参数，必须知道内核为任何一个给定的监听套接字维护两个队列：
1、未完成链接队列。处于SYN_RCVD状态。等待完成相应的TCP三次握手。
2、已完成链接队列。处于ESTABLISHED状态。
即两个队列之和不能超过backlog。
当客户SYN到达，TCP在未完成链接队列中创建一个新项，然后响应三次握手SYN+ACK，等待完成或者超时。若是正常
完成则直接从未完成队列移动到完成队列队尾。

listen函数的backlog参数为两个队列总和最大值。或者他们的1.5倍。一直没有定论。
现在backlog为5已经不够用了，所以一般指定一个比内核能够支持的值还大的值，内核可以自动截断。
当队列满时，客户的SYN到达之后，TCP应该忽略该分节，不能发送RST，使得客户TCP重发SYN。

SYN泛滥攻击：
以超高速率给主机发送SYN，用以装填一个或者多个TCP端口的未完成队列。而且该程序将每个SYN的原IP地址置为
随机数，称为IP欺骗。导致合法用户的服务被拒绝。
防范技术：
1、通过防火墙，路由器等防护
2、通过加固TCP/IP协议栈防范：缩短SYN_RECV状态时间，增大backlog数量。


#include<sys/socket.h>
int accept(int sockfd, struct sockaddr* cliaddr, socklen_t *addrlen);
若成功则为非负描述符，若出错则为-1。
参数cliaddr和addrlen用来返回已经连接的对端进程的协议地址。addrlen是值-结果参数。

当进程调用accept函数时，已完成链接队列中的队头项将返回给进程，或者如果该队列为空，那么进程进入休眠。

如果accept成功，那么返回值是由内核自动生成的一个全新描述符，代表与所返回客户的TCP连接。accept函数的
第一个sockfd为监听套接字，称他的返回套接字为已经连套接字描述符。

一个服务器通常只创建一个监听套接字描述符，区分这两个描述符很重要。内核为每个由服务器进程接受的客户连
接创建一个已连接套接字。

父进程中调用fork之前打开的所有描述符在fork返回之后由子进程分享。网络服务器会利用这一特性：父进程在
accept之后调用fork()函数。

进程在调用exec之前打开的文件描述符通常跨exec继续保持打开。我们使用限定词“通常”，是因为本默认行为可以
使用fcntl设置FD_CLOEXEC描述符标志禁止。

进程终止处理的部分工作就是关闭所有由内核打开的文件描述符。

#include<unistd.h>
int close(int sockfd);
成功则返回0，否则返回-1。服务器中关闭已经连接的套接字只是导致相应的描述符引用计数减1。
被关闭的套接字不能再被进程调用。不能作为read或者write的第一个参数。
TCP尝试将已排队等待发送到对端的任何数据，发送完毕后是正常的TCP链接。
close调用并不引发TCP链接终止序列产生。如果我们确实想在某个TCP连接上发送一个FIN，那么可以改用shutdown
函数以代替close。

#include<sys/socket.h>
int getsockname(int sockfd, struct sockaddr* localaddr, socklen_t * addrlen);
int getpeername(int sockfd, struct sockaddr* peeraddr, socklen_t *addrlen);

一般在TCP客户端，connect成功之后，需要getsockname返回内核分配的本地IP和端口。
在TCP服务器端，bind时若没有指定IP地址，则可以在accept之后调用getsockname函数查看本地IP。
在服务器端调用accept成功之后，某个进程调用exec执行进程，地址结构丢失，但是可以通过getpeername获得对端的
地址结构。


第五章 TCP客户端/服务器端程序

POSIX信号语义：
1、一旦注册了信号处理函数，便一直存在。
2、一个信号处理函数运行期间，正在被递交的信号是阻塞的。
3、如果一个信号在阻塞期间产生了一次或者多次，那么该信号被解阻塞之后通常只递交一次。
	即UNIX信号默认是不排队的。
4、利用sigprocmask函数选择性的阻塞或者解阻塞一组信号是可能的。

大多数网络支持函数都属于慢系统调用，甚至是永远阻塞的系统调用。
当阻塞于某个慢系统调用的一个进程捕获某个信号且相应信号处理函数返回时，该系统调用可能返回一个EINTR错误。
对于accept，read，write，select函数或者open函数，都可以进行重启被中断的系统调用。
但是connect被中断是不能自动重启的。可以调用select等待链接完成。

需要注意：
1、当fork子进程时，必须捕获SIGHLD信号;
2、当捕获信号时，必须处理被中断的系统调用；
3、SIGCHLD必须正确编写，防止waitpid函数留下僵尸进程。

当一个进程向某个已收到RST的套接字执行写操作时，内核向该进程发送一个SIGPIPE信号。

处理SIGPIPE的建议方法取决于它发生时应用进程想做什么。如果没有特殊的事情要做，那么将信号处理办法直接
设置为SIG_IGN。从信号处理函数返回后再处理来自write的EPIPE。

如果不主动发送数据检测出服务器崩溃，那么可以采用SO_KEEPALIVE套接字选项。

服务器主机崩溃：客户主动调用read会返回，ETIMEDOUT，EHOSTUNREACH，ENETUNREACH。
服务器主机崩溃重启：客户read，返回ECONNRESET错误。
服务器主机关机：服务端init进程给所有进程发送SIGTERM信号，并且等待一段时间，对没有终止的进程全部发送
	SIGKILL信号。

通过套接字传送二进制结构是不明智的。解决办法：
1、所有数值通过文本串进行传递。
2、显示定义所支持数据类型的二进制字符串。




第六章	I/O复用：select和poll函数
Unix下可用的5种I/O模型区别：
1、阻塞式I/O
2、非阻塞式I/O
3、I/O复用
4、信号驱动式I/O：信号通知我们，可以继续进行工作。
5、异步I/O：告知内核启动某个动作，并让内核在整个操作完成后通知我们。

一个输入操作通常包括两个阶段：
1、等待数据准备好。
2、从内核向进程复制数据。

阻塞IO，非阻塞IO，IO复用，信号驱动IO都是同步IO模型，只有异步IO没有阻塞IO操作。

可以利用poll和select实现sleep函数，精度更为准确，为微秒。

#include<sys/select.h>
#include<sys/time.h>
int select(int maxfdpl,fd_set *readset,fd_set *writeset, fd_set *exceptset,
			const struct timeval *timeout)
返回：若有就绪描述符则为其数目，若超时则为0，若出错则返回-1。

void FD_ZERO(fd_set *fdset);
void FD_SET(int fd, fd_set *fdset);
void FD_CLR(int fd, fd_set *fdset);
int FD_ISSET(int fd, fd_set *fdset);

描述符集的初始化非常重要，因为作为自动变量分配的一个描述符集如果没有初始化，那么可能发生不可预期的
后果。

maxfd 参数指定待测试的描述符个数，其值为最大描述符加1。
select指针指向的readset，writeset和exceptset所指向的描述符集，这三个参数都是值-结果参数。
我们使用FD_ISSET来测试fd_set数据类型中的描述符。每次都要把所有的描述符集均置为1。

描述符就绪条件：
1）套接字准备好读
1、接受缓冲区中的数据字节数大于等于套接字接受缓冲区低水位标记的当前大小。
2、该连接的读半关闭。
3、该套接字是一个监听套接字且已完成的连接数不为0。
4、其上有一个套接字错误待处理。

2）套接字准备好写
1、该套接字发送缓冲区中的可用空间字节数大于等于套接字发送缓冲区低水位标记。
2、该链接的写半关闭。
3、使用非阻塞式connect的套接字已经建立连接，或者connect已经以失败告终。
4、其上有一个套接字错误待处理。

3）如果一个套接字存在带外数据或者仍处于带外标记，那么它有异常条件待处理。

可以看出套接字发生错误的时候，它将由select标记为即可度又可写。

select的最大描述符数，一般上限是1024等等。

套接字可读情况：
1、如果对端TCP发送数据，那么该套接字变为可读。
2、如果对端TCP发送FIN，那么该套接字变得可读。
3、如果对端TCP发送RST，那么该套接字变得可读。

RTT round-trip time 往返时间。

close两个限制条件：
1、close把描述符-1，仅在该计数变为0时才关闭套接字。利用shutdown可以不管引用计数直接激发TCP发送FIN。
2、close终止读和写两个方向的数据传送。

#include<sys/socket.h>
int shutdown(int sockfd, int howto);
返回：若成功则返回0，若出错则为-1。

howto参数：
SHUT_RD：关闭连接的读这一半，套接字中不再有数据可接收，而且套接字接收缓冲区中的现有数据都被丢弃。
SHUT_WR：关闭连接的写这一半，当前发送缓冲区的数据直接被发送，以及正常终止序列。
SHUT_RDWR：全部半关闭。

#include<sys/select.h>
#include<signal.h>
#include<time.h>

int pselect(int maxfdpl, fd_set* readset, fd_set *writeset, fd_set *exceptset,
		const struct timespec * timeout, const sigset_t *sigmask);
若有就绪描述符则为其数目，若超时则为0，若出错则返回-1。

与select区别：
1、timespec的时间精度可以指定为纳秒。
2、增加sigmask，一个指向信号掩码的指针。

#include<poll.h>
int poll(struct pollfd *fdarray, unsigned long nfds, int timeout)
返回：若有就绪描述符则为其数目，若超时则为0，若出错则返回-1。

第一个参数是指向一个结构数组的第一个元素的指针。每个数组元素都是一个pollfd结构，用于指定测试某个给定
的fd条件。
struct pollfd{
	int		fd;
	short	events;
	short	revents;
}
每个描述符对应两个变量：一个为调用值，另一个为返回结果，避免使用值-结果参数。

返回revent：
1、所有正规TCP数据和所有UDP数据是普通数据。
2、TCP读半部关闭时，譬如收到FIN，也被认为是普通数据，随后的读操作将返回0。
3、非阻塞式connect的完成被认为是使相应套接字可写。

结构数组中元素的个数是由nfds参数指定的。

timeout的值表示指定数目的毫秒数。
支持select的系统比支持poll系统要多，同时pselect能够处理信号阻塞并提供了更高时间分辨率的select增强版本。

第七章 套接字选项

getsockopt和setsockopt函数。

#include<sys/socket.h>
int getsockopt(int sockfd, int level , int optname, void *optval, socklen_t *optlen);
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
若成功则返回0，否则-1。

optval对setesockopt来说是一个参数，对getsockopt来说是一个值-结果参数。
*optval是一个整数，*optval中返回的值0表示相应选型禁止，不为0表示相应选项启用。

套接字状态，下面的套接字选项是由TCP已连接套接字从监听套接字继承来的。
SO_DEBUG,SO_DONTROUTE,SO_KEEPALIVE,SO_LINGER,SO_OOBINLINE,SO_RCVBUF,SO_RCVLOWAT,SO_SNDBUF,SO_SNDLOWAT,
TCP_MAXSET和TCP_NODELAY。

如果想在三路握手完成时确保这些套接字选项中的某一个是给已连接套接字设置的。

SO_BRAODCAST套接字选项
本选项开启或者禁止进程发送广播消息的能力。只有数据报套接字支持广播。
SO_DEBUG
本选项仅有TCP支持。当给一个TCP套接字开启本选项时。
SO_DONTROUTE
本选项规定外出的分组将绕过底层协议的正常路由机制。
SO_ERROR
当一个套接字上发生错误时，协议将so_error变量设为标准，待处理错误。
SO_KEEPALIVE
给一个TCP套接字设置保活选项后，如果2小时内在该套接字的任一一个方向上都没有数据交换，TCP就自动
给对端发送一个保持存活探测的分节。发送探活分节之后：
1、对端以期望的ACK响应。如果进程没有反应，仍然保活。
2、对端以RST响应，致使返回ECONNRESET，套接字本身关闭。
3、对端没有响应，发送端继续发送8个探活，相隔75秒，试图得到响应。最终若一直没有收到响应，就被设置为
ETIMEOUT，套接字被关闭。如果收到ICMP错误，则返回错误。

保持存活选项将检测出半开链接，并进行终止。

SO_LINGER
该选项指定close函数对面向链接的协议如何操作。默认操作是close立即返回，但是如果有数据残留在套接字
缓冲区，系统将试着将这些数据发送给对端。
#include<sys/socket.h>
struct linger{
int		l_onoff;
int 	l_linger;
};
1、l_onoff为0，那么关闭本选项。
2、如果l_onoff为非0值且l_linger为0，那么当close某个链接时TCP将终止该链接。同时丢弃缓冲区中的数据，发送
RST给对端。没有FIN。
3、如果l_onoff为非0值且l_linger为非0值，那么套接字关闭时内核将拖延一段时间。导致进程将被投入睡眠，直到
数据发送完，或者延滞时到。

SO_OOBINLINE
当本选项开启时，带外数据将被留在正常的输入队列中。

SO_RCVBUF和SO_SNDBUF
每个套接字都有一个发送缓冲区和一个接收缓冲区。

对于客户，SO_RCVBUF选项必须在connect之前调用；
对于服务器，这意味着该选项必须在调用listen之前给监听套接字设置。
TCP套接字缓冲区的大小至少应该是相应链接的MSS值得四倍。
四倍是为了保证快速重传和快速恢复算法。

当带宽-延迟积超过TCP的最大正常窗口大小，两段就得设置长肥管道选项。

SO_RCVLOWAT和SO_SNDLOWA
每个套接字还有一个接收低水位和一个发送低水位标记。

SO_RCVTIMEO和SO_SNDTIMEO
getsockopt和setsockopt函数参数指向timeval结构指针。
默认情况下禁止超时。
这两个选项设置后，若超时， 返回-1，并设置errno为EAGAIN或EWOULDBLOCK.
其中connect超时的话，也是返回-1, 但errno设置为EINPROGRESS

SO_REUSEADDR功能作用：
1、允许启动一个监听服务器并捆绑其众所周知的端口
2、允许在同一个端口启动同一服务器多个实例，只要本地IP不同就行。TCP不允许完全重复的捆绑。
3、允许单个进程捆同一个端口到多个套接字上，
4、允许完全重复捆绑。仅支持UDP。

SO_REUSEPORT
1、允许完全重复捆绑，不过只有在想要捆绑同一IP地址和端口的每个套接字都指定本选项。
2、如果被捆绑的IP地址是一个多播地址。那么SO_REUSEADDR和SO_REUSEPORT等效。
SO_REUSEADDR需要对设置的套接字进行setsockopt，SO_REUSEPORT需要每一个都设置。

SO_TYPE套接字选项
返回诸如SOCK_STREAM或者SOCK_DGRAM

SO_USELOOPBACK
仅用于AF_ROUTE套接字。当本选项启动时，相应的套接字将接收在其上发送的任何数据报的一个副本。
禁用环回副本的方法是调用shutdown，并且设置第二个参数为SHUT_RD。

将level设置为IPPROTO_IP，则可以设置对应的套接字选项、
IP_TTL可以设置单播分组上的默认TTL，一般默认都是64。

将level设置为IPPROTO_ICMPV6，可以设置icmpv6选项。

将level设置为IPPROTO_TCP，可以设置对应选项。
TCP_MAXSEG允许我们获取或是设置TCP链接的MSS。

TCP_NODELAY
开启本选项将禁止TCP的Nagle算法。Nagle算法常常与ACK延迟算法联合使用。
Nagle会等待小分组确认，才发送之后的字符。ACK延迟会等待数据进行ACK捎带发送。
所以紧着TCP_NODELAY会节省很多时间。

fcntl函数提供如下网络编程相关特性：
1、非阻塞式I/O。通过使用F_SETFL命令设置O_NONBLOCK文件状态标志。
2、信号驱动式I/O。通过F_SETFL命令设置O_ASYNC文件状态标志。
3、F_SETOWN命令允许我们指定用于接收SIGO和SIGUR信号的套接字属主(进程ID或者进程组ID)。

#include<fcntl.h>
int fcntl(int fd, int cmd,...)
若成功则取决于cmd，出错返回-1。

最常用的选项一般是SO_KEEPALIVE,SO_RCVBUF,SO_SNDBUF和SO_REUSEADDR。
SO_KEEPALIVE套接字选项以自动终止一个半开连接。优点在于他由TCP层进行处理，不需要有一个应用级的休止状态
定时器；缺点是无法区分客户主机崩溃和客户主机连通性的暂时丢失。

SO_LINGER套接字选项使得我们可以更好的控制CLOSE函数返回。



第八章 基本的UDP套接字编程
UDP是无连接不可靠的数据报协议。
UDP可以用来编写一些常见的应用程序：DNS(域名系统)，NFS(网络文件系统)，SNMP(简单网络管理协议)


#include<sys/socket.h>

ssize_t recvfrom(int sockfd, void*buff, size_t nbytes, int flags, 
					struct sockaddr *from, socklen_t *addrlen);
ssize_t sendto(int sockfd, const void *buff, size_t nbytes, int flags, 
					const struct sockaddr *to,socklen_t *addrlen);
若成功则返回读或者写的字节数，若出错则为-1。

如果recvfrom的from参数是一个空指针，那么相应的长度参数也必须是一个空指针，表示我们并不关心数据发送者的
协议地址。

TCP服务器基本是并发服务器
UDP服务器基本是迭代服务器

recvfrom可以将socket接收到的地址保存在from上，所以服务器端直接调用recvfrom函数即可。
对于一个UDP套接字，如果其进程首次调用sendto时没有绑定一个本地端口，那么内核就在此时为他选择一个临时
	端口。

UDP输出操作成功返回仅仅表示在接口输出队列中具有存放所形成的IP数据报的空间。
客户可以调用bind指定他们。在客户的这两个值由内核选择的情形下，临时端口是在第一次调用sendto时一次性选定，
不能改变。但是客户的IP地址却可以随客户发送的每个UDP数据报而变动。

UDP套接字调用connect，没有三路握手过程。内核只是检查是否存在立即可知的错误。记录对端的IP地址和端口号，
然后立即返回到调用进程。

UDP根据是否进行connect可以分成
1、未连接的UDP套接字，新创建UDP套接字默认如此；
2、已连接的UDP套接字，对UDP套接字调用connect结果；

已连接的UDP套接字：
1、不能使用sendto，可以用write或者send，或者使用sendto时候将第五和第六参数置空。
2、不必使用recvfrom，可以用read，recv或者recvmsg。
3、已连接UDP套接字引发的异步错误会返回给他们所在的进程。

对一个UDP套接字connect多次可以指定新的IP地址和端口号。不同于TCP套接字，connect只能调用一次。

当应用进程知道自己要给同一目的地址发送多个数据报时，显示连接套接字效率更高。
UDP发送端淹没接收端是轻而易举的事情。

UDP套接字可以捆绑与TCP套接字相同的端口，因为TCP端口和UDP端口是独立的。


第十四章 高级I/O函数
readv和writev允许单个系统调用读入到或者写出自一个或者多个缓冲区。这些操作称为分散读和集中写。
#include<sys/uio.h>
ssize_t readv(int filedes, const struct iovec* iov, int iovcnt);
ssize_t writev(int filedes, const struct iovec *iov, int iovcnt);
若成功则为读入或写出的字节数，若出错则为-1。

struct iovec{
void 		*iov_base;
size_t 		iov_len;
}

第十六章 非阻塞I/O

套接字的默认状态是阻塞的。

1、对于非阻塞套接字，如果输入操作不能被满足，相应的调用将立即返回一个EWOULDBLOCK错误
2、对于非阻塞套接字，如果其发送缓冲区根本没有空间，输出函数调用将立即返回一个EWOULDBLOCK错误。
3、对于非阻塞套接字，调用accept函数，并且没有新的连接到达，accept调用将会立即返回一个EWOULDBLOCK错误。
4、对于非阻塞套接字，调用connect，链接不能立即建立，那么链接的建立能照样发起，不过会立即返回一个
	EINPROGRESS错误。但是服务器和客户端在一个主机情况下，我们也要准备connect成功返回的情况。
	
非阻塞的TCP套接字上调用connect时，connect立即返回一个EINPROGRESS错误，不过已经发起TCP三路握手继续进行，
使用select检测这个链接成功或者失败的已建立条件。
1、一个connect至少花费一个RTT时间，局域网可能是几个毫秒，广域网可能是几秒。
2、我们可以同时建立多个链接，适用于Web浏览器。
3、使用select等待链接的建立，我们可以指定时间间隔，使得缩短connect的超时。

注意事项：
1、必须处理connect链接，立即建立的情况。
2、当链接建立成功时，描述符变为可写。当链接遇到错误时，描述符变得可读以及可写。

但是一般通过调用getsockopt来检查套接字上是否存在待处理错误来处理。
1、调用getsockopt，检测返回值，并且查看值-结果参数。
2、调用getpeername代替getsockopt。如果返回ENOTCONN，则失败。
3、调用长度为0的read，如果read失败，则connect失败。
4、再一次调用connect，必须失败，返回EISCONN，那么套接字已经连接，表示成功。

当有一个已完成的链接准备好被accept时，select将作为可读描述符返回该链接的监听套接字。

针对服务器listen之后和accept之前，若是套接字链接中止，返回RST，服务器会阻塞在accept上，所以：
1、使用select获悉某个监听套接字上何时有准备好accept时，总需要把这个套接字先设置成非阻塞。
2、后续accept忽略 EWOULDBLOCK，ECONNABORTED，EPROTO。

第二十六章 线程
当一个进程需要另外一个实体来完成某件事时，他就fork一个子进程并让子进程去执行处理。但是fork调用存在问题：
1、fork昂贵，fork要把父进程的内存映像复制到子进程，并且在子进程中复制所有描述符。当今的实现使用称为
	写时复制。
2、fork返回之后父子进程之间信息的传递需要进程间通信机制。
	
线程共享进程的：
1、全局变量
2、进程指令
3、打开文件描述符
4、信号处理函数和信号处置
5、工作目录
6、用户ID和组ID。

线程独有：
1、线程ID
2、寄存器，计数器，栈指针
3、栈
4、errno；
5、信号掩码
6、优先级
	
#include<pthread.h>
int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*func)(void *),void *arg);
若成功则为0，若出错则为正的Exxx值。

pthread_create因在线程数目上超过某个系统限制而不能创建新线程，函数返回值是EAGAIN。
	
#include<pthread.h>
int pthread_join(pothread_t *tid, void **status);
成功则为0，若出错则为正的Exxx值。
必须指定等待线程tid。

#include<pthread.h>
pthread_t pthread_self(void);
返回调用函数的线程ID。

#include<pthread.h>
int pthread_detach(pthread tid);
脱离的线程终止时，所有相关资源全部释放，不能等待终止。

#include<pthread>
void pthread_exit(void *status);
如果线程不曾脱离，线程ID和退出状态，一直留存到调用进程内某个线程对他调用pthread_join

同一进程内的所有线程共享全部描述符，主线程调用close，他就会终止相应链接。创建新线程不影响已经打开的
文件描述符，不同于fork。

线程安全函数版本后面一般加上_r。










	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	