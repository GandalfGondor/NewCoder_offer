分布式系统由一组通过网络进行通信，为了完成共同任务而协调工作的计算机节点组成的系统。

CAP原则：1、Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）。
CAP原则是NOSQL数据库的基石。

RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了
解底层网络技术的协议。

分布式系统特性与衡量标准：
1、透明性。
2、可扩展性。
3、可用性与可靠性。
4、高性能。
5、一致性。保证复制集一致。

按照一个请求过程来解析：
1、在分布式系统中，为了高并发、高可用，一般都是多个节点提供相同的服务。那么，第一个问题就是具体选择哪
个节点来提供服务，这个就是负载均衡（load balance）。负载均衡的思想很简单，但使用非常广泛，在分布式
系统、大型网站的方方面面都有使用，或者说，只要涉及到多个节点提供同质的服务，就需要负载均衡。
2、通过负载均衡找到一个节点，接下来就是真正处理用户的请求，请求有可能简单，也有可能很复杂。简单的请求，
比如读取数据，那么很可能是有缓存的，即分布式缓存，如果缓存没有命中，那么需要去数据库拉取数据。
3、有了更进一步的抽象，那就是RPC（remote produce call），是的远程调用就跟本地过程调用一样方便，屏蔽了网
络通信等诸多细节，增加新的接口也更加方便。
4、一个请求可能包含诸多操作，即在服务A上做一些操作，然后在服务B上做另一些操作。这两个操作需要保证原子
性，要么都成功，要么都不操作。这就涉及到分布式事务的问题，分布式事务是从应用层面保证一致性。
5、一个请求包含多个操作，其实就是涉及到多个服务，分布式系统中有大量的服务，每个服务又是多个节点组成。简
单的办法就是配置文件写死，但这些方法在节点数据巨大、节点动态增删的时候都不大方便，这个时候就需要服务注
册与发现：提供服务的节点向一个协调中心注册自己的地址，使用服务的节点去协调中心拉取地址。
6、生产者并不清楚、也不关心谁会消费这个消息，生产者只用往消息队列里面发就行了，队列会将消息按主题分发给
关注这个主题的消费者。消息队列起到了异步处理、应用解耦的作用。
7、　上面提到，用户操作会产生一些数据，这些数据忠实记录了用户的操作习惯、喜好，是各行各业最宝贵的财富
。比如各种推荐、广告投放、自动识别。这就催生了分布式计算平台，比如Hadoop，Storm等，用来处理这些海量的
数据。
8、最后，用户的操作完成之后，用户的数据需要持久化，但数据量很大，大到按个节点无法存储，那么这个时候就
需要分布式存储：将数据进行划分放在不同的节点上，同时，为了防止数据的丢失，每一份数据会保存多分。传统
的关系型数据库是单点存储，为了在应用层透明的情况下分库分表，会引用额外的代理层。而对于NoSql，一般天然
支持分布式。














