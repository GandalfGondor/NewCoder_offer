C++对象模型
NonStatic data members被配置在每一个class object之内，static data members则被存放在所有object之外，
static和nonstatic function members被放在所有class object之外。
Virtual functions：
1、每个class产生很多指向virtual functions的指针，放在表格之中，这个表格为vtbl
2、每个class object添加一个指针，指向相关的virtual table。指针称为 vptr。
	每一个class关联的type_info object也有vtbl指出。
该指针的设定和重置均由构造函数，析构函数，赋值函数完成。

C++支持多重继承
虚拟继承，即共享的意思。

C++程序设计三种典范
1、程序模型
2、抽象数据类型模型(ADT)
3、面向对象模型(OO)

一个class object内存大小：
1、nonstatic data members。
2、alignment需求和填补上去的空间。
3、支持virtual由内部产生的额外负担。

指针类型区别主要是在所寻地址的object类型不同。也就是说，指针类型教导编译器如何解释某个特定地址中的
内存内容及其大小：

转型(cast)是一种编译器指令。不改变一个指针所含的真正地址，只影响指出内存的大小和内容的解释方式。

第二章 构造函数语义学：
派生类不能继承基类的构造函数，必须自己定义构造函数进行新增数据成员初始化工作，如果想同时初始化基
类数据成员，必须调用基类构造函数。
派生类也不能继承基类的析构函数，派生类的清理工作由派生自身析构函数负责，基类的清理工作由基类析构
函数负责。

指针类型在编译器决定：
1、固定可用的接口。
2、该接口的access level。

编译器确保某object含有vptrs，vptrs的内容不会被基类初始化或者改变。
OO有好的弹性
OB有好的效率

合成默认构造函数：
1、带有默认构造函数的成员类对象：
member objects在class中声明次序来调用各个constructors，由编译器完成。
即会对类的构造函数进行扩张。
2、带有默认构造函数的基类：
派生类没有构造函数，会合成一个默认构造函数。
派生类有构造函数，会在每一个构造函数中进行扩张。先调用基类默认构造函数，再调用成员类对象的默认构造函数。
3、带有virtual function的class
编译器必须为每一个含有虚函数的类设定vptr初值，放置适当的virtual table。
4、带有Virtual Base Class的class

class不展现bitwise copy semantics：
1、class内含一个member object 而后者class声明有一个copy constructor时
2、当class继承自一个base class，而后者存在一个copy constructor时
3、当class声明一个或者多个virtual functions
4、当class派生自虚基类。

新产生class object的vptr不能成功而正确地设好其初始，将导致严重后果。
派生类赋值给基类，会将派生类的派生部分切割掉。

虚函数中： 如果声明基类一个引用或者是指针，但地址是派生类，那么还是会调用派生类函数。


返回值初始化：
1、首先加上一个额外参数，类型是类对象的引用，用来放置被“拷贝建构”而得到的返回值。
2、return之前利用copy constructor调用操作。
3、不传回任何值。

编译器层面优化：
NRV优化：

必须使用初始化列表的情况：
1、初始化引用；
2、初始化const member；
3、调用基类带有参数的构造函数；
4、调用成员类具有带参数的构造函数。

参数初始化列表：
初始化顺序是类中声明顺序，不是列表中的顺序。

第三章 DATA语义学：
空类的sizeof为1字节。被编译器安插进去的char。
默认存在优化的情况下：
空基类被视为派生类对象的开头部分。没有花费额外空间。
若父类是空类，子类是空类，则子类sizeof为一个指针大小(指向虚基类子对象，或者指向一个table)。

菱形继承中最后一层派生类大小：
两个指针大小。

询问大小的时候，必须注意是32位操作系统还是64位操作系统。

同一个access section中，members的排列必须符合“较晚出现的members在class object中有较高的地址”。
主要由于members存在边界调整。

vptr一般安排在明确声明的members之后。

数据存取：
通过一个指针和通过一个对象来存取member，在static data member情况下，完全相同。

若对象为虚基类继承过来的member，通过指针调用必须要通过执行期间接引导，才能够解决该问题。通过对象直接
存取就会很快，因为它已经确定好对应class，member的offset。

具体继承不会增加空间或者存取时间上的额外负担。

在继承关系中：
C++语言保证出现在derived class中的base class subobject 有其完整原样性。(会产生空间的过多浪费。)

派生类指针可以赋值给基类指针，但是基类指针不能赋值给派生类指针。

加上多态：
虚函数带来负担：
1、导入virtual table。
2、每一个对象有一个 vptr。
3、扩充constructor，为vptr设定初始值。
4、扩充destructor，消除vptr。

多重继承，即继承深度。
多继承，继承多个父类。

class如果还有一个或者多个virtual base class，则分割为两部分，一个不变局部和一个共享局部

为防止虚拟继承串链过长，利用空间换时间，将对应虚基类指针存放到派生类中。
针对虚基类个数过多，class object负担增加：
1、利用virtual base class table解决。
2、虚函数表中防止虚基类的偏移。将虚基类地址为负，函数为正。

有class A{public：int a;};
其中& A::a返回的是a在class object中的偏移量。返回值类型为int A:: *
若是取一个真正对象的成员变量地址，将会得到该成员的真实地址。返回值为类型为int *

如何使用指向data member的指针？实例化该int A::*p; A a；a.*p；

第四章 函数语义：
判断一个函数是nonstatic
1、他可以被存取nonstatic；
2、声明为const

成员函数重载，每一个重载化的函数拥有相同的名称，为了让他们独一无二，再加上他们的参数链表。将参数类型也
编码进去，就可以制造出独一无二的效果。

static member function主要特性：
1、没有this指针。
2、不能直接存取class 中的nonstatic members。
3、不能声明为const，volatile，或者virtual
4、不需要有对象调用。

取一个static  member function地址，获得其在内存中的真实地址。
假如class A{static int func(){return 1;}}
&A::func()返回值为static int (*)()，而不是static int (A::*)()。

C++多态表示一个以public base class 指针或者reference，寻址出一个derived class object。

一个class只会有一个virtual table，每一个table对应一个class object中所有激活的virtual function函数地址。
一般空间布局都是虚指针指向各自的虚表，虚表第一个是type info for class ，接下来才是各自的虚函数。

如何确定编译时期设定virtual function调用：
1、不知道class object ptr所指类型，但是我们知道ptr可以存取到该对象的virtual table。
2、虽然我们不知道那个z()，但是我们知道每一个z()函数都放在vtbl的slot 4。

多重继承下：一个derived class内含n-1个额外的虚表，n表示上一层基类的数目。
分为主要表格和次要表格。

主要表格包括了derived class所有虚函数，次要表格只包括除了其他base class的虚函数。
但是次要表格中部分函数需要this指针。

不要再虚基类函数中声明非静态数据成员。

指向member function的指针：
double (point::*pmf)()

堆一个nonstatic member function取地址，获得函数在内存中的地址。但是若是一个virtual function，所知道的
仅仅是virtual function在与其相关的vtbl中的索引值。

指向member function的指针，还有三个字段，index，faddr和delta。

处理inline函数：
1、分析函数定义。
2、扩展在调用点，同时进行参数求值和临时性对象管理。

第五章 构造、解构、拷贝语义学
析构函数不要设置为纯虚。

编译器为POD声明一个trival default constructor，trival destructor，trival copy constructor，trival 
assignment operator
引入虚函数之后，除了class object多负担了一个字节的vptr：
1、定义的constructor被附加了一些码，将vptr进行初始化
2、合成一个拷贝构造函数，和一个拷贝赋值构造函数。

如需要传值方式传回local class object，需要提供copy constructor。因为他的出现会触发NRV优化。

Constructor隐藏代码：
1、初始化列表数据成员放在函数里面。
2、调用成员的默认构造函数。
3、设定vptr，指向对应的虚表。
4、调用基类的constructor。(base class若是非第一基类，则调整this指针)
调用顺序为继承顺序。
5、虚基类的构造函数必须被调用，从左到右，从深到浅。

虚继承中，constructor函数本身必须条件式的测试传进来的参数，然后决定是否调用虚基类的构造函数。

如果在constructor中调用成员函数则，用静态方式决议，不用虚拟机制。
所以vptr初始化实在基类构造函数之后，成员初始化列表之前。所以构造对象严格的变成由基类逐层实现派生类。

constructor构造顺序：
1、派生类中，所有虚基类和上一层基类的构造函数被调用。
2、对象vptr进行初始化，指向相关的vtabl
3、vptr设定之后执行成员列表初始化
4、执行程序员自己的代码

destructor
1、destructor的函数首先被执行
2、如果class拥有member class object，而后者拥有destructor那么他们会以声明顺序相反顺序被调用
3、如果objector内带vptr，则现在被重新设定，指向适当之base class的virtual table
4、如果有任何非平凡基类有destructor，他们会以相反的顺序调用
5、如果有任何虚基类拥有，如果该类是最尾端的派生类，他们会以相反顺序调用。

第六章 执行期语义学
destructor会放在每一个离开点之前。
全局对象要执行静态构造和析构。

如果class定义有一个constructor，某些vec_new()就会被调用，配置并且构造class object所组成的函数。	

第七章 站在对象模型类端
只有在每一个具现操作发生时才做类型检验。
非成员函数名字决议，是根据这个name是否与用以具现出现template的参数类型。
1、如果使用不相关，那么就以scope of template declaration   专注于一般模板类   
2、否则就以scope of template instantiation	专注于特定类实现

C++ exception handling由三个主要的语汇组成：
1、一个throw子句。它在程序某处发出一个exception。
2、一个或者多个catch子句。
3、一个try区段。

EH即exception handling
RTTI正是因为支持EH而获得的副产品
catch子句中对于exception object的任何改变都是局部性的。	

RTTI
RTTI机制提供了一个安全的downcast的设备。只对多态类型有效。
一个type safe downcast必须在执行期对指针有所查询，看看是否指向所表现的类型。

所有多态类都维护了一个指针，指向虚函数表，我们把相关的RTTI object地址放进virtual table中。	
dynamic——cast 运算符可以在执行期决定真正类型。
返回地址，表示动态类型被确认。
返回0，表示没有指向任何指针
type_info是C++所定义的类型描述器的class，该class中放置等待所求类型信息virtual table第一个slot
type_info object。

typeid返回一个const reference，类型为type_info。








