缓存可以提高性能。加速用户访问，降低服务器负载压力。
常见的缓存算法。
LRU，最近最少使用。
LFU，最不经常使用。
FIFO，先进先出。

LRU：简单好用，性能良好，命中率较高。
主要思想：LRU会将近期最不会访问的数据淘汰掉。新数据直接插入链表头部，缓存命中时，将数据移动到头部。
链表满的时候，将链表尾部的数据丢弃。
具备的操作：
1、set(key,value):如果在key的hashmap中存在，重置对应的value，获取节点指针，移动到头部；如果key
	在hashmap不存在，则新建一个节点，并将节点放到链表头部，同时保存在hashmap中。当Cache存满的时候，
	将最后一个删除即可。
2、get(key)：如果key在hashmap中存在，则把对应的节点放到链表头部，并返回对应的value。不存在返回-1。
3、remove(),删除当前节点在链表中的位置。注意若是头节点或者尾节点的情形。
4、setHead(),将指定节点放到链表头部位置。注意若是头结点或者尾节点的情形。

map<int,CacheNode* > mp;
struct CacheNode
{
	int key;
	int val;
	CacheNode* pre,*next;
	CacheNode(int k,int v):key(k),val(v),
}

struct LRUCache
{
	int size;
	CacheNode *head,*tail;
	CacheNode(int s):size(s),head(NULL),tail(NULL){}
}

void remove(CacheNode* Node)
{
	if(Node->next != NULL)
		Node->next->pre = Node->pre;
	else 
		tail = tail->pre;
	if(Node->pre != NULL)
		Node->pre->next = Node->next;
	else 
		head = head->next;
}

void setHead(CacheNode* node)
{
	node->next = head;
	if(head!=NULL)
		head->pre = node;
	head = node;
	if(tail == NULL)
		tail = Node;
}

int get(int key)
{
	map<int,CacheNode* >::iterator it = mp.find(key);
	if(it!= mp.end())
	{
		CacheNode*node = it->second;
		remove(node);
		setHead(node);
		return node->value;
	}
	else return -1;
}

void set(int key,int value)
{
	map<int,CacheNode*>::iterator it = mp.find(key);
	if(it != mp.end())
	{
		CacheNode* node = it ->second;
		node->value = value;
		remove(node);
		setHead(node);
	}
	else
	{
		CacheNode *newNode = new CacheNode(key,value);
		if(mp.size() >= size)
		{
			map<int,CacheNode*>::iterator it2 = mp.find(tail->key);
			remove(tail);
			mp.erase(it2);
		}
		setHead(newNode);
		mp[key] = newNode;
	}
}










