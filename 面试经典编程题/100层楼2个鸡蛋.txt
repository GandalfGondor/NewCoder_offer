 #include <iostream>
using namespace std;
 
#define N 500
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)

void count(int n)
{
	int i, j;
	vector<vector<int>> dp(2, vector<int>(n+10, 0));
	for (i = 0; i <= n; i++)
		dp[0][i] = dp[1][i] = i;
	for (i = 1; i <= n; i++)
		for (j = 1; j < i; j++)
			dp[1][i] = min(dp[1][i], 1 + max(dp[0][j - 1], dp[1][i - j]));
	return;
}

/* dp[1][i] = i 已经是最优解，是准确值。而dp[2][i] = i只是用最差解预处理 */
 
/* 对于每个楼层i，可以从[1,i-1]层中任选一层抛j第一个鸡蛋：鸡蛋可能破了，那
么必须挨个尝试[1,j-1]，即dp[1][j-1],鸡蛋可能没破，那么处理[j+1,i],即dp[2][i-j]。
每次抛都考虑最坏情况，即max(dp[1][j-1],dp[2][i-j])。枚举所有[1,i-1]的楼层，取最优解 */

 
//这里的DP的递推公式为f[n][m] = 1+max(f[n-1][k-1],f[n][m-k]) k属于[1,m-1]
//从1-m层中随机抽出来一层k
//如果第一个鸡蛋在k层碎了，那么我们将测试1~k-1层，就可以找出来，也即1+f[1][k-1]
//如果第一个鸡蛋在k层没有碎，那么我们将测试k+1~m也即m-k层，
//   这里也是重点！！！！ 
//   现在我们手里有2个鸡蛋，要测试m-k层，那么我想问，此时和你手里有2个鸡蛋要
		测试1~m-k层有什么区别？
//      没有区别！是的在已知k层不碎的情况下，测试k+1~m层的方法和测试1~m-k没区别，
		所以可以写成 1+f[n][m-k] 其中1表示为 在k层的那一次测试

