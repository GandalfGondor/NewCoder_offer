针对背包问题，解决方法就是一个内循环和一个外循环：
外循环是遍历物品，内循环是遍历背包容量。
每次更新当容量加一时，判断是应该等于容量不变时的价值，还是加上当前商品的价值。

int backpack(vector<int>w, vector<int> val,int k) 
{
	vector<vector<int>> dp(val.size()+1,vector<int>(k+1,0));
	int i = 0, j = 0;
	for(i=1;i<=w.size();++i)
	{
		for(j= 0 ; j <= k;++j)
		{
			if(j>=w[i-1])
				dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i-1]]+val[i-1]);
			else dp[i][j] = dp[i-1][j];
		}
	}
	return dp.back().back();
}