最小生成树主要用两种解法：
Prim算法：
Prim算法的核心内容就是维护两个队列，vector。
第一个队列，用来维护当前生成树中到达各个点的距离，其中还需要保证已经入树的点置为0。
第二个队列，用来维护当前生成树中到达各个下标点最短的点坐标。

整体循环的作用：从第一个点遍历，找到所有的点。
内部循环一： 找到当前最近的一个点，并且之后将这个点进行记录，即将到达距离置0。
内部循环二： 更新内部两个队列，根据找到最小的新点，更新生成树中能到达点的距离，更新到达各个点的坐标。


void prime(std::vector<std::vector<int>> graph)
{
	int max = 0x0000ffff;
	std::vector<int> point(graph.size(),0);
	std::vector<int> length(graph.size(),max);
	int i ,j,k;
	length = graph[0];
	int min=0;
	for(i=1; i < graph.size();++i)
	{
		min = max;

		for(j=1; j<point.size();++j)
		{
			if(length[j]!=0 && min>length[j])
			{
				min = length[j];
				k = j;
			}
		}
		printf("(%d,%d)  ",k,point[k]);
		length[k] = 0;
		for(j=1; j<point.size();++j)
		{
			if(length[j]!=0 && length[j]>graph[k][j])
			{
				length[j] = graph[k][j];
				point[j] = k;
			}

		}
	}
}