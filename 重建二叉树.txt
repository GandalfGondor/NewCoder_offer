
/**
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* add(vector<int> pre, vector<int> vin, int m, int n, int i)
{
	TreeNode* p = new TreeNode(pre[i]);
	if (m == n)
		return p;
	int j = 0;
	for (; j<pre.size(); j++)
		if (pre[i] == vin[j])
			break;
	if(j-m>0)
		p->left = add( pre, vin, m, j - 1, i + 1);
	if((j + 1)<=n)
		p->right = add( pre, vin, j + 1, n, i + j - m + 1);
	return p;
}
TreeNode* reConstructBinaryTree(vector<int> pre, vector<int> vin) {
	if (pre.size() == NULL)
		return NULL;
	TreeNode *p = new TreeNode(pre[0]);
	int j=0;
	for (; j<pre.size(); j++)
		if (pre[0] == vin[j])
			break;
	if(j>0)
		p->left = add(pre, vin, 0, j - 1, 1);
	if(j+1< pre.size())
		p->right = add( pre, vin, j + 1, pre.size() - 1, j + 1);
	return p;
}

};